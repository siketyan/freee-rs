/*
 * freee人事労務 API
 *
 * freee人事労務のAPI仕様です。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV1EmployeesWorkRecordSerializer {
    /// 休憩時間のリスト
    #[serde(rename = "break_records", skip_serializing_if = "Option::is_none")]
    pub break_records: Option<Vec<crate::models::ApiV1EmployeesWorkRecordTimeRangeResponseSerializer>>,
    /// 出勤時間
    #[serde(rename = "clock_in_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clock_in_at: Option<Option<String>>,
    /// 退勤時間
    #[serde(rename = "clock_out_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clock_out_at: Option<Option<String>>,
    /// 対象日付
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// 勤務パターン - normal_day: 所定労働日 - prescribed_holiday: 所定休日 - legal_holiday: 法定休日
    #[serde(rename = "day_pattern", skip_serializing_if = "Option::is_none")]
    pub day_pattern: Option<DayPattern>,
    /// スケジュールパターン - substitute_holiday_work: 振替出勤 - substitute_holiday: 振替休日 - compensatory_holiday_work: 代休出勤 - compensatory_holiday: 代休 - special_holiday: 特別休暇
    #[serde(rename = "schedule_pattern", skip_serializing_if = "Option::is_none")]
    pub schedule_pattern: Option<SchedulePattern>,
    /// 早退分の時間（分単位）
    #[serde(rename = "early_leaving_mins", skip_serializing_if = "Option::is_none")]
    pub early_leaving_mins: Option<i32>,
    /// 時間休を利用した時間（分単位）
    #[serde(rename = "hourly_paid_holiday_mins", skip_serializing_if = "Option::is_none")]
    pub hourly_paid_holiday_mins: Option<i32>,
    /// 欠勤かどうか
    #[serde(rename = "is_absence", skip_serializing_if = "Option::is_none")]
    pub is_absence: Option<bool>,
    /// 勤怠データが編集可能かどうか
    #[serde(rename = "is_editable", skip_serializing_if = "Option::is_none")]
    pub is_editable: Option<bool>,
    /// 遅刻分の時間（分単位）
    #[serde(rename = "lateness_mins", skip_serializing_if = "Option::is_none")]
    pub lateness_mins: Option<i32>,
    /// 所定労働開始時刻
    #[serde(rename = "normal_work_clock_in_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub normal_work_clock_in_at: Option<Option<String>>,
    /// 所定労働終了時刻
    #[serde(rename = "normal_work_clock_out_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub normal_work_clock_out_at: Option<Option<String>>,
    /// 所定労働時間
    #[serde(rename = "normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub normal_work_mins: Option<i32>,
    /// 有給によって計上される所定労働時間（分）
    #[serde(rename = "normal_work_mins_by_paid_holiday", skip_serializing_if = "Option::is_none")]
    pub normal_work_mins_by_paid_holiday: Option<i32>,
    /// 勤怠メモ
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    /// この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。
    #[serde(rename = "paid_holiday", skip_serializing_if = "Option::is_none")]
    pub paid_holiday: Option<f32>,
    /// 欠勤・遅刻・早退を控除対象時間に算入するかどうか
    #[serde(rename = "use_attendance_deduction", skip_serializing_if = "Option::is_none")]
    pub use_attendance_deduction: Option<bool>,
    /// デフォルトの勤務時間設定を使っているかどうか
    #[serde(rename = "use_default_work_pattern", skip_serializing_if = "Option::is_none")]
    pub use_default_work_pattern: Option<bool>,
    /// 時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）
    #[serde(rename = "total_overtime_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_overtime_work_mins: Option<i32>,
    /// 休日労働時間（分）
    #[serde(rename = "total_holiday_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_holiday_work_mins: Option<i32>,
    /// 深夜労働時間（分）
    #[serde(rename = "total_latenight_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_latenight_work_mins: Option<i32>,
    /// 勤怠登録時に勤務時間の長さを自動で計算しないかどうか
    #[serde(rename = "not_auto_calc_work_time", skip_serializing_if = "Option::is_none")]
    pub not_auto_calc_work_time: Option<bool>,
    /// 法定内残業時間（分）
    #[serde(rename = "total_excess_statutory_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_excess_statutory_work_mins: Option<i32>,
    /// 深夜の法定内残業時間（分）
    #[serde(rename = "total_latenight_excess_statutory_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_latenight_excess_statutory_work_mins: Option<i32>,
    /// 所定外法定外労働時間（分）
    #[serde(rename = "total_overtime_except_normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_overtime_except_normal_work_mins: Option<i32>,
    /// 深夜の所定外法定外労働時間（分）
    #[serde(rename = "total_latenight_overtime_except_normal_work_min", skip_serializing_if = "Option::is_none")]
    pub total_latenight_overtime_except_normal_work_min: Option<i32>,
}

impl ApiV1EmployeesWorkRecordSerializer {
    pub fn new() -> ApiV1EmployeesWorkRecordSerializer {
        ApiV1EmployeesWorkRecordSerializer {
            break_records: None,
            clock_in_at: None,
            clock_out_at: None,
            date: None,
            day_pattern: None,
            schedule_pattern: None,
            early_leaving_mins: None,
            hourly_paid_holiday_mins: None,
            is_absence: None,
            is_editable: None,
            lateness_mins: None,
            normal_work_clock_in_at: None,
            normal_work_clock_out_at: None,
            normal_work_mins: None,
            normal_work_mins_by_paid_holiday: None,
            note: None,
            paid_holiday: None,
            use_attendance_deduction: None,
            use_default_work_pattern: None,
            total_overtime_work_mins: None,
            total_holiday_work_mins: None,
            total_latenight_work_mins: None,
            not_auto_calc_work_time: None,
            total_excess_statutory_work_mins: None,
            total_latenight_excess_statutory_work_mins: None,
            total_overtime_except_normal_work_mins: None,
            total_latenight_overtime_except_normal_work_min: None,
        }
    }
}

/// 勤務パターン - normal_day: 所定労働日 - prescribed_holiday: 所定休日 - legal_holiday: 法定休日
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DayPattern {
    #[serde(rename = "normal_day")]
    NormalDay,
    #[serde(rename = "prescribed_holiday")]
    PrescribedHoliday,
    #[serde(rename = "legal_holiday")]
    LegalHoliday,
}

impl Default for DayPattern {
    fn default() -> DayPattern {
        Self::NormalDay
    }
}
/// スケジュールパターン - substitute_holiday_work: 振替出勤 - substitute_holiday: 振替休日 - compensatory_holiday_work: 代休出勤 - compensatory_holiday: 代休 - special_holiday: 特別休暇
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SchedulePattern {
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "substitute_holiday_work")]
    SubstituteHolidayWork,
    #[serde(rename = "substitute_holiday")]
    SubstituteHoliday,
    #[serde(rename = "compensatory_holiday_work")]
    CompensatoryHolidayWork,
    #[serde(rename = "compensatory_holiday")]
    CompensatoryHoliday,
    #[serde(rename = "special_holiday")]
    SpecialHoliday,
}

impl Default for SchedulePattern {
    fn default() -> SchedulePattern {
        Self::Empty
    }
}

