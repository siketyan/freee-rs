/*
 * freee人事労務 API
 *
 *  <p>freee人事労務のAPI仕様です。</p>  <hr />  <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/hr</p>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> <li>エラーメッセージの変更</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Request-Id</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"error_response\">共通エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>  <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"api_rate_limit\">プランごとの利用可能API</h3>   <p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href=\"https://support.freee.co.jp/hc/ja/articles/203309710\" target=\"_blank\">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>  </br>  <hr />
 *
 * The version of the OpenAPI document: 2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV1EmployeesProfileRuleUpdateRequestSerializer {
    /// 姓 null不可
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// 名 null不可
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// 姓カナ
    #[serde(rename = "last_name_kana")]
    pub last_name_kana: String,
    /// 名カナ
    #[serde(rename = "first_name_kana")]
    pub first_name_kana: String,
    /// 住民票住所の郵便番号1
    #[serde(rename = "zipcode1", skip_serializing_if = "Option::is_none")]
    pub zipcode1: Option<String>,
    /// 住民票住所の郵便番号2
    #[serde(rename = "zipcode2", skip_serializing_if = "Option::is_none")]
    pub zipcode2: Option<String>,
    /// 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "prefecture_code", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<i32>,
    /// 住民票住所の市区町村以降の住所
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// 住民票住所の市区町村以降の住所カナ
    #[serde(rename = "address_kana", skip_serializing_if = "Option::is_none")]
    pub address_kana: Option<String>,
    /// 電話番号1（先頭番号、例:03-1111-222x の03部分）
    #[serde(rename = "phone1", skip_serializing_if = "Option::is_none")]
    pub phone1: Option<String>,
    /// 電話番号2（中間番号、例:03-1111-222x の1111部分）
    #[serde(rename = "phone2", skip_serializing_if = "Option::is_none")]
    pub phone2: Option<String>,
    /// 電話番号3（末尾番号、例:03-1111-222x の222x部分）
    #[serde(rename = "phone3", skip_serializing_if = "Option::is_none")]
    pub phone3: Option<String>,
    /// 現住所の郵便番号１
    #[serde(rename = "residential_zipcode1", skip_serializing_if = "Option::is_none")]
    pub residential_zipcode1: Option<String>,
    /// 現住所の郵便番号２
    #[serde(rename = "residential_zipcode2", skip_serializing_if = "Option::is_none")]
    pub residential_zipcode2: Option<String>,
    /// 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "residential_prefecture_code", skip_serializing_if = "Option::is_none")]
    pub residential_prefecture_code: Option<i32>,
    /// 現住所の住所
    #[serde(rename = "residential_address", skip_serializing_if = "Option::is_none")]
    pub residential_address: Option<String>,
    /// 現住所の住所カナ
    #[serde(rename = "residential_address_kana", skip_serializing_if = "Option::is_none")]
    pub residential_address_kana: Option<String>,
    /// 雇用形態 board-member: 役員, (空文字列): 役員以外
    #[serde(rename = "employment_type", skip_serializing_if = "Option::is_none")]
    pub employment_type: Option<EmploymentType>,
    /// 肩書
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// null不可 配偶者の有無
    #[serde(rename = "married", skip_serializing_if = "Option::is_none")]
    pub married: Option<bool>,
    /// null不可 勤労学生かどうか
    #[serde(rename = "is_working_student", skip_serializing_if = "Option::is_none")]
    pub is_working_student: Option<bool>,
    /// 寡夫／寡婦かどうか null不可 na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親
    #[serde(rename = "widow_type", skip_serializing_if = "Option::is_none")]
    pub widow_type: Option<WidowType>,
    /// 障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者
    #[serde(rename = "disability_type", skip_serializing_if = "Option::is_none")]
    pub disability_type: Option<DisabilityType>,
    /// メールアドレス
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
}

impl ApiV1EmployeesProfileRuleUpdateRequestSerializer {
    pub fn new(last_name: String, first_name: String, last_name_kana: String, first_name_kana: String) -> ApiV1EmployeesProfileRuleUpdateRequestSerializer {
        ApiV1EmployeesProfileRuleUpdateRequestSerializer {
            last_name,
            first_name,
            last_name_kana,
            first_name_kana,
            zipcode1: None,
            zipcode2: None,
            prefecture_code: None,
            address: None,
            address_kana: None,
            phone1: None,
            phone2: None,
            phone3: None,
            residential_zipcode1: None,
            residential_zipcode2: None,
            residential_prefecture_code: None,
            residential_address: None,
            residential_address_kana: None,
            employment_type: None,
            title: None,
            gender: None,
            married: None,
            is_working_student: None,
            widow_type: None,
            disability_type: None,
            email: None,
        }
    }
}

/// 雇用形態 board-member: 役員, (空文字列): 役員以外
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmploymentType {
    #[serde(rename = "board-member")]
    BoardMember,
    #[serde(rename = "")]
    Empty,
}

impl Default for EmploymentType {
    fn default() -> EmploymentType {
        Self::BoardMember
    }
}
/// 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "unselected")]
    Unselected,
    #[serde(rename = "male")]
    Male,
    #[serde(rename = "female")]
    Female,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Unselected
    }
}
/// 寡夫／寡婦かどうか null不可 na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WidowType {
    #[serde(rename = "na")]
    Na,
    #[serde(rename = "widower")]
    Widower,
    #[serde(rename = "widow")]
    Widow,
    #[serde(rename = "special_widow")]
    SpecialWidow,
    #[serde(rename = "one_parent")]
    OneParent,
}

impl Default for WidowType {
    fn default() -> WidowType {
        Self::Na
    }
}
/// 障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisabilityType {
    #[serde(rename = "na")]
    Na,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "heavy")]
    Heavy,
}

impl Default for DisabilityType {
    fn default() -> DisabilityType {
        Self::Na
    }
}

