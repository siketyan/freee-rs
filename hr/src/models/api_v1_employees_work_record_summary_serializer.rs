/*
 * freee人事労務 API
 *
 * freee人事労務のAPI仕様です。  ## [重要] freee人事労務 APIの新バージョンについて  このリファレンスはfreee人事労務 APIの新バージョンのリファレンスです。  2022年7月まで[旧バージョン](https://developer.freee.co.jp/docs/hr/pre-reference)と合わせて2つのバージョンが利用できる状態です。  新しいAPIを利用するにはリクエストヘッダーに以下を指定します。  ``` FREEE-VERSION: 2022-02-01 ```  指定がない場合には2022年7月に廃止予定のAPIを利用することになります。  詳細な変更やスケジュールは[【重要】freee人事労務APIの仕様変更について](https://developer.freee.co.jp/news/5418)をご覧ください。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV1EmployeesWorkRecordSummarySerializer {
    /// 給与支払い年
    #[serde(rename = "year", skip_serializing_if = "Option::is_none")]
    pub year: Option<i32>,
    /// 給与支払い月
    #[serde(rename = "month", skip_serializing_if = "Option::is_none")]
    pub month: Option<i32>,
    /// 集計開始日
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// 集計終了日
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// 労働日数
    #[serde(rename = "work_days", skip_serializing_if = "Option::is_none")]
    pub work_days: Option<f32>,
    /// 総勤務時間（分）
    #[serde(rename = "total_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_work_mins: Option<i32>,
    /// 所定内労働時間（分）
    #[serde(rename = "total_normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_normal_work_mins: Option<i32>,
    /// 給与計算に用いられる法定内残業時間（分）
    #[serde(rename = "total_excess_statutory_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_excess_statutory_work_mins: Option<i32>,
    /// 所定外法定外労働時間
    #[serde(rename = "total_overtime_except_normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_overtime_except_normal_work_mins: Option<i32>,
    /// 所定内法定外労働時間（裁量労働制の場合はみなしベース）
    #[serde(rename = "total_overtime_within_normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_overtime_within_normal_work_mins: Option<i32>,
    /// 法定休日労働時間（分）
    #[serde(rename = "total_holiday_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_holiday_work_mins: Option<i32>,
    /// 深夜労働allow(company)時間（分）
    #[serde(rename = "total_latenight_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_latenight_work_mins: Option<i32>,
    /// 欠勤日数
    #[serde(rename = "num_absences", skip_serializing_if = "Option::is_none")]
    pub num_absences: Option<f32>,
    /// 有給取得日数
    #[serde(rename = "num_paid_holidays", skip_serializing_if = "Option::is_none")]
    pub num_paid_holidays: Option<f32>,
    #[serde(rename = "num_paid_holidays_and_hours", skip_serializing_if = "Option::is_none")]
    pub num_paid_holidays_and_hours: Option<Box<crate::models::ApiV1HolidaysAndHoursSerializer>>,
    /// 有給残日数
    #[serde(rename = "num_paid_holidays_left", skip_serializing_if = "Option::is_none")]
    pub num_paid_holidays_left: Option<f32>,
    #[serde(rename = "num_paid_holidays_and_hours_left", skip_serializing_if = "Option::is_none")]
    pub num_paid_holidays_and_hours_left: Option<Box<crate::models::ApiV1HolidaysAndHoursSerializer>>,
    /// 振替休日の使用日数
    #[serde(rename = "num_substitute_holidays_used", skip_serializing_if = "Option::is_none")]
    pub num_substitute_holidays_used: Option<f32>,
    /// 代休の使用日数
    #[serde(rename = "num_compensatory_holidays_used", skip_serializing_if = "Option::is_none")]
    pub num_compensatory_holidays_used: Option<f32>,
    /// 特別休暇の使用日数
    #[serde(rename = "num_special_holidays_used", skip_serializing_if = "Option::is_none")]
    pub num_special_holidays_used: Option<f32>,
    #[serde(rename = "num_special_holidays_and_hours_used", skip_serializing_if = "Option::is_none")]
    pub num_special_holidays_and_hours_used: Option<Box<crate::models::ApiV1HolidaysAndHoursSerializer>>,
    /// 遅刻早退時間（分）
    #[serde(rename = "total_lateness_and_early_leaving_mins", skip_serializing_if = "Option::is_none")]
    pub total_lateness_and_early_leaving_mins: Option<i32>,
    /// 複数時給の労働時間の内訳（複数時給を設定している従業員のみ）
    #[serde(rename = "multi_hourly_wages", skip_serializing_if = "Option::is_none")]
    pub multi_hourly_wages: Option<Vec<crate::models::ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer>>,
    /// 日々の勤怠情報
    #[serde(rename = "work_records", skip_serializing_if = "Option::is_none")]
    pub work_records: Option<Vec<crate::models::ApiV1EmployeesWorkRecordSerializer>>,
    /// 不足時間（分）
    #[serde(rename = "total_shortage_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_shortage_work_mins: Option<i32>,
    /// 支給対象の法定内残業時間（分）
    #[serde(rename = "total_deemed_paid_excess_statutory_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_deemed_paid_excess_statutory_work_mins: Option<i32>,
    /// 支給対象の時間外労働時間（分）
    #[serde(rename = "total_deemed_paid_overtime_except_normal_work_mins", skip_serializing_if = "Option::is_none")]
    pub total_deemed_paid_overtime_except_normal_work_mins: Option<i32>,
}

impl ApiV1EmployeesWorkRecordSummarySerializer {
    pub fn new() -> ApiV1EmployeesWorkRecordSummarySerializer {
        ApiV1EmployeesWorkRecordSummarySerializer {
            year: None,
            month: None,
            start_date: None,
            end_date: None,
            work_days: None,
            total_work_mins: None,
            total_normal_work_mins: None,
            total_excess_statutory_work_mins: None,
            total_overtime_except_normal_work_mins: None,
            total_overtime_within_normal_work_mins: None,
            total_holiday_work_mins: None,
            total_latenight_work_mins: None,
            num_absences: None,
            num_paid_holidays: None,
            num_paid_holidays_and_hours: None,
            num_paid_holidays_left: None,
            num_paid_holidays_and_hours_left: None,
            num_substitute_holidays_used: None,
            num_compensatory_holidays_used: None,
            num_special_holidays_used: None,
            num_special_holidays_and_hours_used: None,
            total_lateness_and_early_leaving_mins: None,
            multi_hourly_wages: None,
            work_records: None,
            total_shortage_work_mins: None,
            total_deemed_paid_excess_statutory_work_mins: None,
            total_deemed_paid_overtime_except_normal_work_mins: None,
        }
    }
}


