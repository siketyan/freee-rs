/*
 * freee人事労務 API
 *
 *  <p>freee人事労務のAPI仕様です。</p>  <hr />  <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/hr</p>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> <li>エラーメッセージの変更</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Request-Id</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"error_response\">共通エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>  <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"api_rate_limit\">プランごとの利用可能API</h3>   <p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href=\"https://support.freee.co.jp/hc/ja/articles/203309710\" target=\"_blank\">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>  </br>  <hr />
 *
 * The version of the OpenAPI document: 2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer {
    /// 家族情報ID（idがない場合は新規作成になる)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 家族情報を削除するか true: 削除する, false: 削除しない
    #[serde(rename = "destroy", skip_serializing_if = "Option::is_none")]
    pub destroy: Option<bool>,
    /// 姓 null不可
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// 名 null不可
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// 姓カナ
    #[serde(rename = "last_name_kana", skip_serializing_if = "Option::is_none")]
    pub last_name_kana: Option<String>,
    /// 名カナ
    #[serde(rename = "first_name_kana", skip_serializing_if = "Option::is_none")]
    pub first_name_kana: Option<String>,
    /// 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
    #[serde(rename = "relationship")]
    pub relationship: Relationship,
    /// 生年月日 null不可 1900年1月1日から現在年+5の12月31日まで登録可能
    #[serde(rename = "birth_date")]
    pub birth_date: String,
    /// 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
    #[serde(rename = "social_insurance_and_tax_dependent")]
    pub social_insurance_and_tax_dependent: SocialInsuranceAndTaxDependent,
    /// 所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。
    #[serde(rename = "income", skip_serializing_if = "Option::is_none")]
    pub income: Option<i32>,
    /// 給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
    #[serde(rename = "employment_revenue", skip_serializing_if = "Option::is_none")]
    pub employment_revenue: Option<i32>,
    /// 給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
    #[serde(rename = "all_other_income", skip_serializing_if = "Option::is_none")]
    pub all_other_income: Option<i32>,
    /// 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
    #[serde(rename = "disability_type")]
    pub disability_type: DisabilityType,
    /// 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
    #[serde(rename = "residence_type")]
    pub residence_type: ResidenceType,
    /// 住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録
    #[serde(rename = "zipcode1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zipcode1: Option<Option<String>>,
    /// 住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録
    #[serde(rename = "zipcode2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zipcode2: Option<Option<String>>,
    /// 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録
    #[serde(rename = "prefecture_code", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<i32>,
    /// 住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// 住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録
    #[serde(rename = "address_kana", skip_serializing_if = "Option::is_none")]
    pub address_kana: Option<String>,
    /// 国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
    #[serde(rename = "annual_remittance_amount", skip_serializing_if = "Option::is_none")]
    pub annual_remittance_amount: Option<i32>,
    /// 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
    #[serde(rename = "non_resident_dependents_reason", skip_serializing_if = "Option::is_none")]
    pub non_resident_dependents_reason: Option<NonResidentDependentsReason>,
}

impl ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer {
    pub fn new(last_name: String, first_name: String, relationship: Relationship, birth_date: String, social_insurance_and_tax_dependent: SocialInsuranceAndTaxDependent, disability_type: DisabilityType, residence_type: ResidenceType) -> ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer {
        ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer {
            id: None,
            destroy: None,
            last_name,
            first_name,
            last_name_kana: None,
            first_name_kana: None,
            relationship,
            birth_date,
            social_insurance_and_tax_dependent,
            income: None,
            employment_revenue: None,
            all_other_income: None,
            disability_type,
            residence_type,
            zipcode1: None,
            zipcode2: None,
            prefecture_code: None,
            address: None,
            address_kana: None,
            annual_remittance_amount: None,
            non_resident_dependents_reason: None,
        }
    }
}

/// 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relationship {
    #[serde(rename = "spouse")]
    Spouse,
    #[serde(rename = "father")]
    Father,
    #[serde(rename = "mother")]
    Mother,
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "senior_brother")]
    SeniorBrother,
    #[serde(rename = "junior_brother")]
    JuniorBrother,
    #[serde(rename = "senior_sister")]
    SeniorSister,
    #[serde(rename = "junior_sister")]
    JuniorSister,
    #[serde(rename = "grandchild")]
    Grandchild,
    #[serde(rename = "grandfather")]
    Grandfather,
    #[serde(rename = "grandmother")]
    Grandmother,
    #[serde(rename = "father_in_law")]
    FatherInLaw,
    #[serde(rename = "mother_in_law")]
    MotherInLaw,
    #[serde(rename = "grandfather_in_law")]
    GrandfatherInLaw,
    #[serde(rename = "grandmother_in_law")]
    GrandmotherInLaw,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "great_grandfather")]
    GreatGrandfather,
    #[serde(rename = "great_grandmother")]
    GreatGrandmother,
    #[serde(rename = "spouses_child")]
    SpousesChild,
}

impl Default for Relationship {
    fn default() -> Relationship {
        Self::Spouse
    }
}
/// 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SocialInsuranceAndTaxDependent {
    #[serde(rename = "social_insurance_and_tax")]
    SocialInsuranceAndTax,
    #[serde(rename = "tax_only")]
    TaxOnly,
    #[serde(rename = "social_insurance_only")]
    SocialInsuranceOnly,
    #[serde(rename = "not_dependent")]
    NotDependent,
}

impl Default for SocialInsuranceAndTaxDependent {
    fn default() -> SocialInsuranceAndTaxDependent {
        Self::SocialInsuranceAndTax
    }
}
/// 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisabilityType {
    #[serde(rename = "na")]
    Na,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "heavy")]
    Heavy,
}

impl Default for DisabilityType {
    fn default() -> DisabilityType {
        Self::Na
    }
}
/// 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResidenceType {
    #[serde(rename = "live_in")]
    LiveIn,
    #[serde(rename = "resident")]
    Resident,
    #[serde(rename = "non_resident")]
    NonResident,
}

impl Default for ResidenceType {
    fn default() -> ResidenceType {
        Self::LiveIn
    }
}
/// 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NonResidentDependentsReason {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "over_16_to_under_30_or_over_70")]
    Over16ToUnder30OrOver70,
    #[serde(rename = "study_abroad")]
    StudyAbroad,
    #[serde(rename = "handicapped")]
    Handicapped,
    #[serde(rename = "over_38_man")]
    Over38Man,
}

impl Default for NonResidentDependentsReason {
    fn default() -> NonResidentDependentsReason {
        Self::None
    }
}

