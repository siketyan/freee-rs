/*
 * freee人事労務 API
 *
 * freee人事労務のAPI仕様です。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV1EmployeesDependentRuleUpdateRequestSerializer {
    /// 扶養親族ルールID（idがない場合は新規作成になる)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 姓 null不可
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// 名 null不可
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// 姓カナ
    #[serde(rename = "last_name_kana", skip_serializing_if = "Option::is_none")]
    pub last_name_kana: Option<String>,
    /// 名カナ
    #[serde(rename = "first_name_kana", skip_serializing_if = "Option::is_none")]
    pub first_name_kana: Option<String>,
    /// 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
    #[serde(rename = "gender")]
    pub gender: Gender,
    /// 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
    #[serde(rename = "relationship")]
    pub relationship: Relationship,
    /// 生年月日 null不可
    #[serde(rename = "birth_date")]
    pub birth_date: String,
    /// 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
    #[serde(rename = "residence_type")]
    pub residence_type: ResidenceType,
    /// 住民票住所の郵便番号1
    #[serde(rename = "zipcode1", skip_serializing_if = "Option::is_none")]
    pub zipcode1: Option<String>,
    /// 住民票住所の郵便番号2
    #[serde(rename = "zipcode2", skip_serializing_if = "Option::is_none")]
    pub zipcode2: Option<String>,
    /// 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "prefecture_code", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<i32>,
    /// 住民票住所の市区町村以降の住所
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// 住民票住所の市区町村以降の住所カナ
    #[serde(rename = "address_kana", skip_serializing_if = "Option::is_none")]
    pub address_kana: Option<String>,
    /// 基礎年金番号
    #[serde(rename = "base_pension_num", skip_serializing_if = "Option::is_none")]
    pub base_pension_num: Option<String>,
    /// 年間所得 null不可
    #[serde(rename = "income")]
    pub income: i32,
    /// 年間収入 null不可
    #[serde(rename = "annual_revenue")]
    pub annual_revenue: i32,
    /// 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
    #[serde(rename = "disability_type")]
    pub disability_type: DisabilityType,
    /// 職業
    #[serde(rename = "occupation", skip_serializing_if = "Option::is_none")]
    pub occupation: Option<String>,
    /// 一年間の送金額
    #[serde(rename = "annual_remittance_amount", skip_serializing_if = "Option::is_none")]
    pub annual_remittance_amount: Option<i32>,
    /// 扶養親族を削除するか
    #[serde(rename = "destroy", skip_serializing_if = "Option::is_none")]
    pub destroy: Option<bool>,
    /// 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
    #[serde(rename = "social_insurance_and_tax_dependent")]
    pub social_insurance_and_tax_dependent: SocialInsuranceAndTaxDependent,
}

impl ApiV1EmployeesDependentRuleUpdateRequestSerializer {
    pub fn new(last_name: String, first_name: String, gender: Gender, relationship: Relationship, birth_date: String, residence_type: ResidenceType, income: i32, annual_revenue: i32, disability_type: DisabilityType, social_insurance_and_tax_dependent: SocialInsuranceAndTaxDependent) -> ApiV1EmployeesDependentRuleUpdateRequestSerializer {
        ApiV1EmployeesDependentRuleUpdateRequestSerializer {
            id: None,
            last_name,
            first_name,
            last_name_kana: None,
            first_name_kana: None,
            gender,
            relationship,
            birth_date,
            residence_type,
            zipcode1: None,
            zipcode2: None,
            prefecture_code: None,
            address: None,
            address_kana: None,
            base_pension_num: None,
            income,
            annual_revenue,
            disability_type,
            occupation: None,
            annual_remittance_amount: None,
            destroy: None,
            social_insurance_and_tax_dependent,
        }
    }
}

/// 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "unselected")]
    Unselected,
    #[serde(rename = "male")]
    Male,
    #[serde(rename = "female")]
    Female,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Unselected
    }
}
/// 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relationship {
    #[serde(rename = "spouse")]
    Spouse,
    #[serde(rename = "father")]
    Father,
    #[serde(rename = "mother")]
    Mother,
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "senior_brother")]
    SeniorBrother,
    #[serde(rename = "junior_brother")]
    JuniorBrother,
    #[serde(rename = "senior_sister")]
    SeniorSister,
    #[serde(rename = "junior_sister")]
    JuniorSister,
    #[serde(rename = "grandchild")]
    Grandchild,
    #[serde(rename = "grandfather")]
    Grandfather,
    #[serde(rename = "grandmother")]
    Grandmother,
    #[serde(rename = "father_in_law")]
    FatherInLaw,
    #[serde(rename = "mother_in_law")]
    MotherInLaw,
    #[serde(rename = "grandfather_in_law")]
    GrandfatherInLaw,
    #[serde(rename = "grandmother_in_law")]
    GrandmotherInLaw,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "great_grandfather")]
    GreatGrandfather,
    #[serde(rename = "great_grandmother")]
    GreatGrandmother,
    #[serde(rename = "spouses_child")]
    SpousesChild,
}

impl Default for Relationship {
    fn default() -> Relationship {
        Self::Spouse
    }
}
/// 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResidenceType {
    #[serde(rename = "live_in")]
    LiveIn,
    #[serde(rename = "resident")]
    Resident,
    #[serde(rename = "non_resident")]
    NonResident,
}

impl Default for ResidenceType {
    fn default() -> ResidenceType {
        Self::LiveIn
    }
}
/// 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisabilityType {
    #[serde(rename = "na")]
    Na,
    #[serde(rename = "general")]
    General,
    #[serde(rename = "heavy")]
    Heavy,
}

impl Default for DisabilityType {
    fn default() -> DisabilityType {
        Self::Na
    }
}
/// 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SocialInsuranceAndTaxDependent {
    #[serde(rename = "social_insurance_and_tax")]
    SocialInsuranceAndTax,
    #[serde(rename = "tax_only")]
    TaxOnly,
    #[serde(rename = "social_insurance_only")]
    SocialInsuranceOnly,
    #[serde(rename = "not_dependent")]
    NotDependent,
}

impl Default for SocialInsuranceAndTaxDependent {
    fn default() -> SocialInsuranceAndTaxDependent {
        Self::SocialInsuranceAndTax
    }
}

