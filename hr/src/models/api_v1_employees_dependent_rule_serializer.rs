/*
 * freee人事労務 API
 *
 * freee人事労務のAPI仕様です。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV1EmployeesDependentRuleSerializer {
    /// 扶養親族ルールID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 事業所ID
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<i32>,
    /// 従業員ID
    #[serde(rename = "employee_id", skip_serializing_if = "Option::is_none")]
    pub employee_id: Option<i32>,
    /// 姓
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// 名
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// 姓カナ
    #[serde(rename = "last_name_kana", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name_kana: Option<Option<String>>,
    /// 名カナ
    #[serde(rename = "first_name_kana", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name_kana: Option<Option<String>>,
    /// 性別　unselected: 未選択, male: 男性, female: 女性
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// 続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
    #[serde(rename = "relationship", skip_serializing_if = "Option::is_none")]
    pub relationship: Option<String>,
    /// 生年月日
    #[serde(rename = "birth_date", skip_serializing_if = "Option::is_none")]
    pub birth_date: Option<String>,
    /// 同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
    #[serde(rename = "residence_type", skip_serializing_if = "Option::is_none")]
    pub residence_type: Option<String>,
    /// 住民票住所の郵便番号1
    #[serde(rename = "zipcode1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zipcode1: Option<Option<String>>,
    /// 住民票住所の郵便番号2
    #[serde(rename = "zipcode2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zipcode2: Option<Option<String>>,
    /// 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "prefecture_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<Option<i32>>,
    /// 住民票住所の市区町村以降の住所
    #[serde(rename = "address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address: Option<Option<String>>,
    /// 住民票住所の市区町村以降の住所カナ
    #[serde(rename = "address_kana", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub address_kana: Option<Option<String>>,
    /// 基礎年金番号
    #[serde(rename = "base_pension_num", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub base_pension_num: Option<Option<String>>,
    /// 年間所得
    #[serde(rename = "income", skip_serializing_if = "Option::is_none")]
    pub income: Option<i32>,
    /// 年間収入
    #[serde(rename = "annual_revenue", skip_serializing_if = "Option::is_none")]
    pub annual_revenue: Option<i32>,
    /// 障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者
    #[serde(rename = "disability_type", skip_serializing_if = "Option::is_none")]
    pub disability_type: Option<String>,
    /// 職業
    #[serde(rename = "occupation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub occupation: Option<Option<String>>,
    /// 一年間の送金額
    #[serde(rename = "annual_remittance_amount", skip_serializing_if = "Option::is_none")]
    pub annual_remittance_amount: Option<i32>,
    /// 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ
    #[serde(rename = "social_insurance_and_tax_dependent", skip_serializing_if = "Option::is_none")]
    pub social_insurance_and_tax_dependent: Option<String>,
}

impl ApiV1EmployeesDependentRuleSerializer {
    pub fn new() -> ApiV1EmployeesDependentRuleSerializer {
        ApiV1EmployeesDependentRuleSerializer {
            id: None,
            company_id: None,
            employee_id: None,
            last_name: None,
            first_name: None,
            last_name_kana: None,
            first_name_kana: None,
            gender: None,
            relationship: None,
            birth_date: None,
            residence_type: None,
            zipcode1: None,
            zipcode2: None,
            prefecture_code: None,
            address: None,
            address_kana: None,
            base_pension_num: None,
            income: None,
            annual_revenue: None,
            disability_type: None,
            occupation: None,
            annual_remittance_amount: None,
            social_insurance_and_tax_dependent: None,
        }
    }
}

/// 性別　unselected: 未選択, male: 男性, female: 女性
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "unselected")]
    Unselected,
    #[serde(rename = "male")]
    Male,
    #[serde(rename = "female")]
    Female,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Unselected
    }
}

