/*
 * freee人事労務 API
 *
 * freee人事労務のAPI仕様です。  ## 認証について  OAuth2.0を利用します。詳細は[ドキュメントの認証](https://developer.freee.co.jp/docs)パートを参照してください。  ## エンドポイント  https://api.freee.co.jp/hr  ## 後方互換性ありの変更  freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。  - 新しいAPIリソース・エンドポイントの追加 - 既存のAPIに対して必須ではない新しいリクエストパラメータの追加 - 既存のAPIレスポンスに対する新しいプロパティの追加 - 既存のAPIレスポンスに対するプロパティの順番の入れ変え - keyとなっているidやcodeの長さの変更（長くする）  ## エラーレスポンス  APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。  |ステータスコード|原因| |---|---| |400|リクエストパラメータが不正| |401|アクセストークンが無効| |403|アクセス権限がない| |404|リソースが存在しない| |429|リクエスト回数制限を越えた| |503|システム内で予期しないエラーが発生|  メッセージボディ内の `messages` にはエラー内容を説明する文字列が入ります。  ``` {     \"status_code\": 400,     \"errors\": [         {             \"type\": \"bad_request\",             \"messages\": [                 \"リクエストの形式が不正です。\"             ]         }     ] } ```  ## API使用制限  APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。  ``` X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z ```  各ヘッダの意味は次のとおりです。  |ヘッダ名|説明| |---|---| |X-Ratelimit-Limit|使用回数の上限| |X-Ratelimit-Remaining|残り使用回数| |X-Ratelimit-Reset|使用回数がリセットされる時刻|  上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。 その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。  
 *
 * The version of the OpenAPI document: v2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiV1EmployeesProfileRuleSerializer {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 事業所ID
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<i32>,
    /// 従業員ID
    #[serde(rename = "employee_id", skip_serializing_if = "Option::is_none")]
    pub employee_id: Option<i32>,
    /// 姓
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// 名
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// 姓カナ
    #[serde(rename = "last_name_kana", skip_serializing_if = "Option::is_none")]
    pub last_name_kana: Option<String>,
    /// 名カナ
    #[serde(rename = "first_name_kana", skip_serializing_if = "Option::is_none")]
    pub first_name_kana: Option<String>,
    /// 住民票住所の郵便番号1
    #[serde(rename = "zipcode1", skip_serializing_if = "Option::is_none")]
    pub zipcode1: Option<String>,
    /// 住民票住所の郵便番号2
    #[serde(rename = "zipcode2", skip_serializing_if = "Option::is_none")]
    pub zipcode2: Option<String>,
    /// 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "prefecture_code", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<i32>,
    /// 住民票住所の市区町村以降の住所
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// 住民票住所の市区町村以降の住所カナ
    #[serde(rename = "address_kana", skip_serializing_if = "Option::is_none")]
    pub address_kana: Option<String>,
    /// 電話番号1
    #[serde(rename = "phone1", skip_serializing_if = "Option::is_none")]
    pub phone1: Option<String>,
    /// 電話番号2
    #[serde(rename = "phone2", skip_serializing_if = "Option::is_none")]
    pub phone2: Option<String>,
    /// 電話番号3
    #[serde(rename = "phone3", skip_serializing_if = "Option::is_none")]
    pub phone3: Option<String>,
    /// 現住所の郵便番号１
    #[serde(rename = "residential_zipcode1", skip_serializing_if = "Option::is_none")]
    pub residential_zipcode1: Option<String>,
    /// 現住所の郵便番号２
    #[serde(rename = "residential_zipcode2", skip_serializing_if = "Option::is_none")]
    pub residential_zipcode2: Option<String>,
    /// 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
    #[serde(rename = "residential_prefecture_code", skip_serializing_if = "Option::is_none")]
    pub residential_prefecture_code: Option<i32>,
    /// 現住所の住所
    #[serde(rename = "residential_address", skip_serializing_if = "Option::is_none")]
    pub residential_address: Option<String>,
    /// 現住所の住所カナ
    #[serde(rename = "residential_address_kana", skip_serializing_if = "Option::is_none")]
    pub residential_address_kana: Option<String>,
    /// 雇用形態 board-member: 役員, (空文字列): 役員以外
    #[serde(rename = "employment_type", skip_serializing_if = "Option::is_none")]
    pub employment_type: Option<String>,
    /// 肩書
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// 性別　unselected: 未選択, male: 男性, female: 女性
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// 配偶者の有無
    #[serde(rename = "married", skip_serializing_if = "Option::is_none")]
    pub married: Option<bool>,
    /// 勤労学生かどうか
    #[serde(rename = "is_working_student", skip_serializing_if = "Option::is_none")]
    pub is_working_student: Option<bool>,
    /// 寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親
    #[serde(rename = "widow_type", skip_serializing_if = "Option::is_none")]
    pub widow_type: Option<String>,
    /// 障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者
    #[serde(rename = "disability_type", skip_serializing_if = "Option::is_none")]
    pub disability_type: Option<String>,
}

impl ApiV1EmployeesProfileRuleSerializer {
    pub fn new() -> ApiV1EmployeesProfileRuleSerializer {
        ApiV1EmployeesProfileRuleSerializer {
            id: None,
            company_id: None,
            employee_id: None,
            last_name: None,
            first_name: None,
            last_name_kana: None,
            first_name_kana: None,
            zipcode1: None,
            zipcode2: None,
            prefecture_code: None,
            address: None,
            address_kana: None,
            phone1: None,
            phone2: None,
            phone3: None,
            residential_zipcode1: None,
            residential_zipcode2: None,
            residential_prefecture_code: None,
            residential_address: None,
            residential_address_kana: None,
            employment_type: None,
            title: None,
            gender: None,
            married: None,
            is_working_student: None,
            widow_type: None,
            disability_type: None,
        }
    }
}

/// 性別　unselected: 未選択, male: 男性, female: 女性
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "unselected")]
    Unselected,
    #[serde(rename = "male")]
    Male,
    #[serde(rename = "female")]
    Female,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Unselected
    }
}

