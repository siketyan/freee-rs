/*
 * freee人事労務 API
 *
 *  <p>freee人事労務のAPI仕様です。</p>  <hr />  <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/hr</p>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> <li>エラーメッセージの変更</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Request-Id</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"error_response\">共通エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>  <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"api_rate_limit\">プランごとの利用可能API</h3>   <p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href=\"https://support.freee.co.jp/hc/ja/articles/203309710\" target=\"_blank\">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>  </br>  <hr />
 *
 * The version of the OpenAPI document: 2022-02-01
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV1EmployeeYearendAdjustmentInsuranceSerializer {
    /// 保険料id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// 区分<br> 保険会社等が発行する証明書類に基づいて区分を設定してください。<br> 保険の種類によって設定可能な値が変わります。<br> ・life_care_pension_insurance<br> 　life: 生命保険<br> 　care: 介護保険<br> 　pension: 個人年金保険<br> ・earthquake_non_life_insurance<br> 　earthquake: 地震保険<br> 　old_long_term_non_life: 旧長期損害保険<br> ・social_insurance<br> 　national_pension: 国民年金<br> 　national_pension_fund_premium: 国民年金基金<br> 　national_health: 国民健康保険<br> 　health: 健康保険<br> 　care_insurance_deduction_of_pension: 介護保険<br> 　employee_pension: 厚生年金<br> 　advanced_elderly_medical: 後期高齢者医療保険<br> 　none: その他（印刷後に手書き）<br> ・other_insurance<br> 　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br> 　idc: 個人型確定拠出年金（iDeCo）<br> 　cdc: 企業型確定拠出年金<br> 　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Category>,
    /// 新旧区分<br> 区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br> 上記以外の保険では none を指定してください。
    #[serde(rename = "new_or_old", skip_serializing_if = "Option::is_none")]
    pub new_or_old: Option<NewOrOld>,
    /// 保険会社等の名称<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "company_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<Option<String>>,
    /// 保険等の種類（目的）<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "kind_of_purpose", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub kind_of_purpose: Option<Option<String>>,
    /// 保険期間又は年金支払期間<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "period", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub period: Option<Option<Period>>,
    /// 保険等の契約者 姓<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "policyholder_last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub policyholder_last_name: Option<Option<String>>,
    /// 保険等の契約者 名<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "policyholder_first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub policyholder_first_name: Option<Option<String>>,
    /// 保険金等の受取人 姓<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "recipient_last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recipient_last_name: Option<Option<String>>,
    /// 保険金等の受取人 名<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "recipient_first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recipient_first_name: Option<Option<String>>,
    /// 保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "recipient_relationship", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recipient_relationship: Option<Option<RecipientRelationship>>,
    /// 年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br> 区分が個人年金保険の時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
    #[serde(rename = "payment_start_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_start_date: Option<Option<String>>,
    /// 保険料額
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<i32>,
}

impl ApiV1EmployeeYearendAdjustmentInsuranceSerializer {
    pub fn new() -> ApiV1EmployeeYearendAdjustmentInsuranceSerializer {
        ApiV1EmployeeYearendAdjustmentInsuranceSerializer {
            id: None,
            r#type: None,
            category: None,
            new_or_old: None,
            company_name: None,
            kind_of_purpose: None,
            period: None,
            policyholder_last_name: None,
            policyholder_first_name: None,
            recipient_last_name: None,
            recipient_first_name: None,
            recipient_relationship: None,
            payment_start_date: None,
            amount: None,
        }
    }
}

/// 保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "life_care_pension_insurance")]
    LifeCarePensionInsurance,
    #[serde(rename = "earthquake_non_life_insurance")]
    EarthquakeNonLifeInsurance,
    #[serde(rename = "social_insurance")]
    SocialInsurance,
    #[serde(rename = "other_insurance")]
    OtherInsurance,
}

impl Default for Type {
    fn default() -> Type {
        Self::LifeCarePensionInsurance
    }
}
/// 区分<br> 保険会社等が発行する証明書類に基づいて区分を設定してください。<br> 保険の種類によって設定可能な値が変わります。<br> ・life_care_pension_insurance<br> 　life: 生命保険<br> 　care: 介護保険<br> 　pension: 個人年金保険<br> ・earthquake_non_life_insurance<br> 　earthquake: 地震保険<br> 　old_long_term_non_life: 旧長期損害保険<br> ・social_insurance<br> 　national_pension: 国民年金<br> 　national_pension_fund_premium: 国民年金基金<br> 　national_health: 国民健康保険<br> 　health: 健康保険<br> 　care_insurance_deduction_of_pension: 介護保険<br> 　employee_pension: 厚生年金<br> 　advanced_elderly_medical: 後期高齢者医療保険<br> 　none: その他（印刷後に手書き）<br> ・other_insurance<br> 　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br> 　idc: 個人型確定拠出年金（iDeCo）<br> 　cdc: 企業型確定拠出年金<br> 　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Category {
    #[serde(rename = "life")]
    Life,
    #[serde(rename = "care")]
    Care,
    #[serde(rename = "pension")]
    Pension,
    #[serde(rename = "earthquake")]
    Earthquake,
    #[serde(rename = "old_long_term_non_life")]
    OldLongTermNonLife,
    #[serde(rename = "national_pension")]
    NationalPension,
    #[serde(rename = "national_pension_fund_premium")]
    NationalPensionFundPremium,
    #[serde(rename = "national_health")]
    NationalHealth,
    #[serde(rename = "care_insurance_deduction_of_pension")]
    CareInsuranceDeductionOfPension,
    #[serde(rename = "health")]
    Health,
    #[serde(rename = "employee_pension")]
    EmployeePension,
    #[serde(rename = "advanced_elderly_medical")]
    AdvancedElderlyMedical,
    #[serde(rename = "sema")]
    Sema,
    #[serde(rename = "idc")]
    Idc,
    #[serde(rename = "cdc")]
    Cdc,
    #[serde(rename = "dsma")]
    Dsma,
    #[serde(rename = "none")]
    None,
}

impl Default for Category {
    fn default() -> Category {
        Self::Life
    }
}
/// 新旧区分<br> 区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br> 上記以外の保険では none を指定してください。
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NewOrOld {
    #[serde(rename = "new")]
    New,
    #[serde(rename = "old")]
    Old,
    #[serde(rename = "none")]
    None,
}

impl Default for NewOrOld {
    fn default() -> NewOrOld {
        Self::New
    }
}
/// 保険期間又は年金支払期間<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Period {
    #[serde(rename = "終身")]
    ,
    #[serde(rename = "0年")]
    Variant0,
    #[serde(rename = "1年")]
    Variant1,
    #[serde(rename = "2年")]
    Variant2,
    #[serde(rename = "3年")]
    Variant3,
    #[serde(rename = "4年")]
    Variant4,
    #[serde(rename = "5年")]
    Variant5,
    #[serde(rename = "6年")]
    Variant6,
    #[serde(rename = "7年")]
    Variant7,
    #[serde(rename = "8年")]
    Variant8,
    #[serde(rename = "9年")]
    Variant9,
    #[serde(rename = "10年")]
    Variant10,
    #[serde(rename = "11年")]
    Variant11,
    #[serde(rename = "12年")]
    Variant12,
    #[serde(rename = "13年")]
    Variant13,
    #[serde(rename = "14年")]
    Variant14,
    #[serde(rename = "15年")]
    Variant15,
    #[serde(rename = "16年")]
    Variant16,
    #[serde(rename = "17年")]
    Variant17,
    #[serde(rename = "18年")]
    Variant18,
    #[serde(rename = "19年")]
    Variant19,
    #[serde(rename = "20年")]
    Variant20,
    #[serde(rename = "21年")]
    Variant21,
    #[serde(rename = "22年")]
    Variant22,
    #[serde(rename = "23年")]
    Variant23,
    #[serde(rename = "24年")]
    Variant24,
    #[serde(rename = "25年")]
    Variant25,
    #[serde(rename = "26年")]
    Variant26,
    #[serde(rename = "27年")]
    Variant27,
    #[serde(rename = "28年")]
    Variant28,
    #[serde(rename = "29年")]
    Variant29,
    #[serde(rename = "30年")]
    Variant30,
    #[serde(rename = "31年")]
    Variant31,
    #[serde(rename = "32年")]
    Variant32,
    #[serde(rename = "33年")]
    Variant33,
    #[serde(rename = "34年")]
    Variant34,
    #[serde(rename = "35年")]
    Variant35,
    #[serde(rename = "36年")]
    Variant36,
    #[serde(rename = "37年")]
    Variant37,
    #[serde(rename = "38年")]
    Variant38,
    #[serde(rename = "39年")]
    Variant39,
    #[serde(rename = "40年")]
    Variant40,
    #[serde(rename = "41年")]
    Variant41,
    #[serde(rename = "42年")]
    Variant42,
    #[serde(rename = "43年")]
    Variant43,
    #[serde(rename = "44年")]
    Variant44,
    #[serde(rename = "45年")]
    Variant45,
    #[serde(rename = "46年")]
    Variant46,
    #[serde(rename = "47年")]
    Variant47,
    #[serde(rename = "48年")]
    Variant48,
    #[serde(rename = "49年")]
    Variant49,
    #[serde(rename = "50年")]
    Variant50,
    #[serde(rename = "51年")]
    Variant51,
    #[serde(rename = "52年")]
    Variant52,
    #[serde(rename = "53年")]
    Variant53,
    #[serde(rename = "54年")]
    Variant54,
    #[serde(rename = "55年")]
    Variant55,
    #[serde(rename = "56年")]
    Variant56,
    #[serde(rename = "57年")]
    Variant57,
    #[serde(rename = "58年")]
    Variant58,
    #[serde(rename = "59年")]
    Variant59,
    #[serde(rename = "60年")]
    Variant60,
    #[serde(rename = "61年")]
    Variant61,
    #[serde(rename = "62年")]
    Variant62,
    #[serde(rename = "63年")]
    Variant63,
    #[serde(rename = "64年")]
    Variant64,
    #[serde(rename = "65年")]
    Variant65,
    #[serde(rename = "66年")]
    Variant66,
    #[serde(rename = "67年")]
    Variant67,
    #[serde(rename = "68年")]
    Variant68,
    #[serde(rename = "69年")]
    Variant69,
    #[serde(rename = "70年")]
    Variant70,
    #[serde(rename = "71年")]
    Variant71,
    #[serde(rename = "72年")]
    Variant72,
    #[serde(rename = "73年")]
    Variant73,
    #[serde(rename = "74年")]
    Variant74,
    #[serde(rename = "75年")]
    Variant75,
    #[serde(rename = "76年")]
    Variant76,
    #[serde(rename = "77年")]
    Variant77,
    #[serde(rename = "78年")]
    Variant78,
    #[serde(rename = "79年")]
    Variant79,
    #[serde(rename = "80年")]
    Variant80,
    #[serde(rename = "81年")]
    Variant81,
    #[serde(rename = "82年")]
    Variant82,
    #[serde(rename = "83年")]
    Variant83,
    #[serde(rename = "84年")]
    Variant84,
    #[serde(rename = "85年")]
    Variant85,
    #[serde(rename = "86年")]
    Variant86,
    #[serde(rename = "87年")]
    Variant87,
    #[serde(rename = "88年")]
    Variant88,
    #[serde(rename = "89年")]
    Variant89,
    #[serde(rename = "90年")]
    Variant90,
    #[serde(rename = "91年")]
    Variant91,
    #[serde(rename = "92年")]
    Variant92,
    #[serde(rename = "93年")]
    Variant93,
    #[serde(rename = "94年")]
    Variant94,
    #[serde(rename = "95年")]
    Variant95,
    #[serde(rename = "96年")]
    Variant96,
    #[serde(rename = "97年")]
    Variant97,
    #[serde(rename = "98年")]
    Variant98,
    #[serde(rename = "99年")]
    Variant99,
    #[serde(rename = "100年")]
    Variant100,
    #[serde(rename = "")]
    Empty,
}

impl Default for Period {
    fn default() -> Period {
        Self::
    }
}
/// 保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br> 保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br> 上記以外の保険では入力した値は反映されません。
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RecipientRelationship {
    #[serde(rename = "myself")]
    Myself,
    #[serde(rename = "husband")]
    Husband,
    #[serde(rename = "wife")]
    Wife,
    #[serde(rename = "father")]
    Father,
    #[serde(rename = "mother")]
    Mother,
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "senior_brother")]
    SeniorBrother,
    #[serde(rename = "junior_brother")]
    JuniorBrother,
    #[serde(rename = "senior_sister")]
    SeniorSister,
    #[serde(rename = "junior_sister")]
    JuniorSister,
    #[serde(rename = "grandchild")]
    Grandchild,
    #[serde(rename = "grandfather")]
    Grandfather,
    #[serde(rename = "grandmother")]
    Grandmother,
    #[serde(rename = "father_in_law")]
    FatherInLaw,
    #[serde(rename = "mother_in_law")]
    MotherInLaw,
    #[serde(rename = "grandfather_in_law")]
    GrandfatherInLaw,
    #[serde(rename = "grandmother_in_law")]
    GrandmotherInLaw,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "")]
    Empty,
}

impl Default for RecipientRelationship {
    fn default() -> RecipientRelationship {
        Self::Myself
    }
}

