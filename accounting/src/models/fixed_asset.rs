/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p> <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>http status codeが429となった場合、API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>x-ratelimit-limit:10 x-ratelimit-remaining:1 x-ratelimit-reset:2023-01-13T10:22:29+09:00 </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>  <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">x-ratelimit-limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">x-ratelimit-remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">x-ratelimit-reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  </br>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FixedAsset {
    /// 事業所ID
    #[serde(rename = "company_id")]
    pub company_id: i32,
    /// 固定資産ID
    #[serde(rename = "id")]
    pub id: i32,
    /// 固定資産名
    #[serde(rename = "name")]
    pub name: String,
    /// 管理番号
    #[serde(rename = "management_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub management_number: Option<Option<String>>,
    /// 勘定科目ID
    #[serde(rename = "account_item_id", skip_serializing_if = "Option::is_none")]
    pub account_item_id: Option<i32>,
    /// 部門ID
    #[serde(rename = "section_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub section_id: Option<Option<i32>>,
    /// 品目ID
    #[serde(rename = "item_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<Option<i32>>,
    /// 償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)
    #[serde(rename = "depreciation_method", skip_serializing_if = "Option::is_none")]
    pub depreciation_method: Option<DepreciationMethod>,
    /// 減価償却に使う勘定科目ID
    #[serde(rename = "depreciation_account_item_id", skip_serializing_if = "Option::is_none")]
    pub depreciation_account_item_id: Option<i32>,
    /// 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
    #[serde(rename = "prefecture_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefecture_code: Option<Option<i32>>,
    /// 申告先市区町村
    #[serde(rename = "city_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub city_name: Option<Option<String>>,
    /// 減価償却費
    #[serde(rename = "depreciation_amount", skip_serializing_if = "Option::is_none")]
    pub depreciation_amount: Option<i32>,
    /// 取得価額
    #[serde(rename = "acquisition_cost", skip_serializing_if = "Option::is_none")]
    pub acquisition_cost: Option<i32>,
    /// 期首残高
    #[serde(rename = "opening_balance", skip_serializing_if = "Option::is_none")]
    pub opening_balance: Option<i32>,
    /// 未償却残高(期末残高)
    #[serde(rename = "closing_balance", skip_serializing_if = "Option::is_none")]
    pub closing_balance: Option<i32>,
    /// 期首減価償却累計額
    #[serde(rename = "opening_accumulated_depreciation", skip_serializing_if = "Option::is_none")]
    pub opening_accumulated_depreciation: Option<i32>,
    /// 期末減価償却累計額
    #[serde(rename = "closing_accumulated_depreciation", skip_serializing_if = "Option::is_none")]
    pub closing_accumulated_depreciation: Option<i32>,
    /// 耐用年数
    #[serde(rename = "life_years", skip_serializing_if = "Option::is_none")]
    pub life_years: Option<i32>,
    /// 取得日
    #[serde(rename = "acquisition_date", skip_serializing_if = "Option::is_none")]
    pub acquisition_date: Option<String>,
    /// 更新日
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// 売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)
    #[serde(rename = "retire_type", skip_serializing_if = "Option::is_none")]
    pub retire_type: Option<RetireType>,
    /// 除却日、もしくは売却日
    #[serde(rename = "retire_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub retire_date: Option<Option<String>>,
}

impl FixedAsset {
    pub fn new(company_id: i32, id: i32, name: String) -> FixedAsset {
        FixedAsset {
            company_id,
            id,
            name,
            management_number: None,
            account_item_id: None,
            section_id: None,
            item_id: None,
            depreciation_method: None,
            depreciation_account_item_id: None,
            prefecture_code: None,
            city_name: None,
            depreciation_amount: None,
            acquisition_cost: None,
            opening_balance: None,
            closing_balance: None,
            opening_accumulated_depreciation: None,
            closing_accumulated_depreciation: None,
            life_years: None,
            acquisition_date: None,
            updated_at: None,
            retire_type: None,
            retire_date: None,
        }
    }
}

/// 償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DepreciationMethod {
    #[serde(rename = "small_sum_method")]
    SmallSumMethod,
    #[serde(rename = "lump_sum_method")]
    LumpSumMethod,
    #[serde(rename = "straight_line_method")]
    StraightLineMethod,
    #[serde(rename = "multiple_method")]
    MultipleMethod,
    #[serde(rename = "old_multiple_method")]
    OldMultipleMethod,
    #[serde(rename = "old_straight_line_method")]
    OldStraightLineMethod,
    #[serde(rename = "non_depreciate_method")]
    NonDepreciateMethod,
    #[serde(rename = "voluntary_method")]
    VoluntaryMethod,
    #[serde(rename = "immediate_method")]
    ImmediateMethod,
    #[serde(rename = "equal_method")]
    EqualMethod,
}

impl Default for DepreciationMethod {
    fn default() -> DepreciationMethod {
        Self::SmallSumMethod
    }
}
/// 売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RetireType {
    #[serde(rename = "sell")]
    Sell,
    #[serde(rename = "retire")]
    Retire,
    #[serde(rename = "depreciating")]
    Depreciating,
}

impl Default for RetireType {
    fn default() -> RetireType {
        Self::Sell
    }
}

