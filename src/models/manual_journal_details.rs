/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ManualJournalDetails {
    /// 貸借行ID
    #[serde(rename = "id")]
    pub id: i64,
    /// 貸借(貸方: credit, 借方: debit)
    #[serde(rename = "entry_side")]
    pub entry_side: EntrySide,
    /// 勘定科目ID
    #[serde(rename = "account_item_id")]
    pub account_item_id: i32,
    /// 税区分コード
    #[serde(rename = "tax_code")]
    pub tax_code: i32,
    /// 取引先ID
    #[serde(rename = "partner_id")]
    pub partner_id: Option<i32>,
    /// 取引先名
    #[serde(rename = "partner_name")]
    pub partner_name: Option<String>,
    /// 取引先コード
    #[serde(rename = "partner_code", skip_serializing_if = "Option::is_none")]
    pub partner_code: Option<String>,
    /// 正式名称（255文字以内）
    #[serde(rename = "partner_long_name")]
    pub partner_long_name: Option<String>,
    /// 品目ID
    #[serde(rename = "item_id")]
    pub item_id: Option<i32>,
    /// 品目
    #[serde(rename = "item_name")]
    pub item_name: Option<String>,
    /// 部門ID
    #[serde(rename = "section_id")]
    pub section_id: Option<i32>,
    /// 部門
    #[serde(rename = "section_name")]
    pub section_name: Option<String>,
    #[serde(rename = "tag_ids")]
    pub tag_ids: Vec<i32>,
    #[serde(rename = "tag_names")]
    pub tag_names: Vec<String>,
    /// セグメント１ID
    #[serde(rename = "segment_1_tag_id", skip_serializing_if = "Option::is_none")]
    pub segment_1_tag_id: Option<i64>,
    /// セグメント１ID
    #[serde(rename = "segment_1_tag_name", skip_serializing_if = "Option::is_none")]
    pub segment_1_tag_name: Option<i32>,
    /// セグメント２ID
    #[serde(rename = "segment_2_tag_id", skip_serializing_if = "Option::is_none")]
    pub segment_2_tag_id: Option<i64>,
    /// セグメント２
    #[serde(rename = "segment_2_tag_name", skip_serializing_if = "Option::is_none")]
    pub segment_2_tag_name: Option<i32>,
    /// セグメント３ID
    #[serde(rename = "segment_3_tag_id", skip_serializing_if = "Option::is_none")]
    pub segment_3_tag_id: Option<i64>,
    /// セグメント３
    #[serde(rename = "segment_3_tag_name", skip_serializing_if = "Option::is_none")]
    pub segment_3_tag_name: Option<i32>,
    /// 金額（税込で指定してください）
    #[serde(rename = "amount")]
    pub amount: i32,
    /// 消費税額（指定しない場合は自動で計算されます）
    #[serde(rename = "vat")]
    pub vat: i32,
    /// 備考
    #[serde(rename = "description")]
    pub description: String,
}

impl ManualJournalDetails {
    pub fn new(id: i64, entry_side: EntrySide, account_item_id: i32, tax_code: i32, partner_id: Option<i32>, partner_name: Option<String>, partner_long_name: Option<String>, item_id: Option<i32>, item_name: Option<String>, section_id: Option<i32>, section_name: Option<String>, tag_ids: Vec<i32>, tag_names: Vec<String>, amount: i32, vat: i32, description: String) -> ManualJournalDetails {
        ManualJournalDetails {
            id,
            entry_side,
            account_item_id,
            tax_code,
            partner_id,
            partner_name,
            partner_code: None,
            partner_long_name,
            item_id,
            item_name,
            section_id,
            section_name,
            tag_ids,
            tag_names,
            segment_1_tag_id: None,
            segment_1_tag_name: None,
            segment_2_tag_id: None,
            segment_2_tag_name: None,
            segment_3_tag_id: None,
            segment_3_tag_name: None,
            amount,
            vat,
            description,
        }
    }
}

/// 貸借(貸方: credit, 借方: debit)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntrySide {
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "debit")]
    Debit,
}

impl Default for EntrySide {
    fn default() -> EntrySide {
        Self::Credit
    }
}

